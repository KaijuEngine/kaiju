package editor_stage_manager // import "."


CONSTANTS

const StageIdPrefix = "stage_"

TYPES

type StageAlreadyExistsError struct {
	Id string
}

func (e StageAlreadyExistsError) Error() string

type StageEntity struct {
	engine.Entity
	StageData StageEntityEditorData
	// Has unexported fields.
}

func (e *StageEntity) AddDataBinding(binding any)

func (e *StageEntity) DataBindings() []any

func (e *StageEntity) Depth() int

func (e *StageEntity) SetMaterial(mat *rendering.Material, host *engine.Host)

type StageEntityEditorData struct {
	Bvh         *collision.BVH
	Mesh        *rendering.Mesh
	ShaderData  rendering.DrawInstance
	Description stages.EntityDescription
}
    StageEntityEditorData is the structure holding all the uniquely identifiable
    and linking data about the entity on this stage. That will include things
    like content linkage, data bindings, etc.

type StageManager struct {
	OnEntitySpawn         events.EventWithArg[*StageEntity]
	OnEntitySelected      events.EventWithArg[*StageEntity]
	OnEntityDeselected    events.EventWithArg[*StageEntity]
	OnEntityChangedParent events.EventWithArg[*StageEntity]

	// Has unexported fields.
}
    StageManager represents the current stage in the editor. It contains all of
    the entities on the stage.

func (m *StageManager) AddEntity(name string, point matrix.Vec3) *StageEntity
    AddEntity will create a new entity for the stage. This entity will have a
    #StageEntityData automatically added to it as named data named "stage".

func (m *StageManager) Clear()
    Clear will destroy all entities that are managed by this stage manager.

func (m *StageManager) ClearSelection()

func (m *StageManager) DeselectEntity(e *StageEntity)

func (m *StageManager) EntityById(id string) (*StageEntity, bool)

func (m *StageManager) HasSelection() bool

func (m *StageManager) Initialize(host *engine.Host)

func (m *StageManager) IsNew() bool

func (m *StageManager) IsSelected(e *StageEntity) bool

func (m *StageManager) IsSelectedById(id string) bool

func (m *StageManager) List() []*StageEntity
    List will return all of the internally held entities for the stage

func (m *StageManager) LoadStage(id string, host *engine.Host, cache *content_database.Cache, fs *project_file_system.FileSystem) error

func (m *StageManager) NewStage()

func (m *StageManager) SaveStage(cache *content_database.Cache, fs *project_file_system.FileSystem) error

func (m *StageManager) SelectAppendEntityById(id string)

func (m *StageManager) SelectEntity(e *StageEntity)

func (m *StageManager) SelectEntityById(id string)

func (m *StageManager) SelectToggleEntityById(id string)

func (m *StageManager) Selection() []*StageEntity

func (m *StageManager) SelectionBounds() collision.AABB

func (m *StageManager) SelectionCenter() matrix.Vec3

func (m *StageManager) SelectionPivotCenter() matrix.Vec3

func (m *StageManager) SetEntityParent(child, parent *StageEntity)

func (m *StageManager) SetStageId(id string, cache *content_database.Cache) error

func (m *StageManager) StageId() string

func (m *StageManager) TryAppendSelect(ray collision.Ray) (*StageEntity, bool)

func (m *StageManager) TryHitEntity(ray collision.Ray) (*StageEntity, bool)

func (m *StageManager) TrySelect(ray collision.Ray) (*StageEntity, bool)

func (m *StageManager) TryToggleSelect(ray collision.Ray) (*StageEntity, bool)

