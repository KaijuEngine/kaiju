package ui // import "."


CONSTANTS

const (
	EventTypeInvalid = EventType(iota)
	EventTypeEnter
	EventTypeMove
	EventTypeExit
	EventTypeClick
	EventTypeRightClick
	EventTypeDoubleClick
	EventTypeDown
	EventTypeUp
	EventTypeMiss
	EventTypeDragStart
	EventTypeDrop
	EventTypeDropEnter
	EventTypeDropExit
	EventTypeDragEnd
	EventTypeScroll
	EventTypeRebuild
	EventTypeDestroy
	EventTypeSubmit
	EventTypeChange
	EventTypeRender
	EventTypeKeyDown
	EventTypeKeyUp
	EventTypeEnd
)
const (
	InputTypeDefault = iota
	InputTypeText
	InputTypeNumber
	InputTypePhone
	InputTypeDatetime
)
const (
	PositioningStatic = Positioning(iota)
	PositioningAbsolute
	PositioningFixed
	PositioningRelative
	PositioningSticky
)
const (
	PanelScrollDirectionNone       = 0x00
	PanelScrollDirectionVertical   = 0x01
	PanelScrollDirectionHorizontal = 0x02
	PanelScrollDirectionBoth       = 0x03
)
const (
	BorderStyleNone = iota
	BorderStyleHidden
	BorderStyleDotted
	BorderStyleDashed
	BorderStyleSolid
	BorderStyleDouble
	BorderStyleGroove
	BorderStyleRidge
	BorderStyleInset
	BorderStyleOutset
)
const (
	ContentFitNone = iota
	ContentFitWidth
	ContentFitHeight
	ContentFitBoth
)
const (
	OverflowScroll = iota
	OverflowVisible
	OverflowHidden
)
const (
	DirtyTypeNone = iota
	DirtyTypeLayout
	DirtyTypeResize
	DirtyTypeGenerated
	DirtyTypeColorChange
	DirtyTypeScissor
	DirtyTypeParent
	DirtyTypeParentLayout
	DirtyTypeParentResize
	DirtyTypeParentGenerated
	DirtyTypeParentReGenerated
	DirtyTypeParentColorChange
	DirtyTypeParentScissor
)
const (
	ElementTypeLabel = ElementType(iota)
	ElementTypePanel
	ElementTypeButton
	ElementTypeCheckbox
	ElementTypeImage
	ElementTypeInput
	ElementTypeProgressBar
	ElementTypeSelect
	ElementTypeSlider
)
const (
	EntityDataName = "ui"
)
const (
	LabelFontSize = 14.0
)

TYPES

type BasicStylizer struct {
	Parent *UI
}

type BorderStyle = int32

type Button Panel

func (b *Button) Base() *UI

func (b *Button) ButtonData() *buttonData

func (b *Button) Init(texture *rendering.Texture, text string)

func (b *Button) Label() *Label

func (b *Button) SetColor(color matrix.Color)

type Checkbox Panel

func (cb *Checkbox) Base() *UI

func (cb *Checkbox) CheckboxData() *checkboxData

func (cb *Checkbox) Init()

func (cb Checkbox) IsChecked() bool

func (cb *Checkbox) SetChecked(isChecked bool)

type ContentFit = int32

type DirtyType = int

type ElementType = uint8

type EventType = int

type Group struct {
	// Has unexported fields.
}

func (group *Group) Attach(host *engine.Host)

func (group *Group) Detach(host *engine.Host)

func (group *Group) HasRequests() bool

func (g *Group) SetThreaded()

type Image Panel

func (s *Image) Base() *UI

func (img *Image) Frame() int

func (s *Image) ImageData() *imageData

func (s *Image) Init(texture *rendering.Texture)

func (s *Image) InitFlipbook(framesPerSecond float32, textures []*rendering.Texture)

func (s *Image) InitSpriteSheet(framesPerSecond float32, texture *rendering.Texture, jsonStr string)

func (img *Image) PlayAnimation()

func (img *Image) SetFlipBookAnimation(framesPerSecond float32, textures ...*rendering.Texture)

func (img *Image) SetFrame(index int)

func (img *Image) SetFrameRate(framesPerSecond float32)

func (img *Image) SetSpriteSheet(framesPerSecond float32, texture *rendering.Texture, jsonStr string)

func (img *Image) SetTexture(texture *rendering.Texture)

func (img *Image) StopAnimation()

type Input Panel

func (input *Input) Base() *UI

func (input *Input) Focus()

func (input *Input) Init(placeholderText string)

func (input *Input) InputData() *inputData

func (input *Input) InsertText(text string)

func (input *Input) IsFocused() bool

func (input *Input) RemoveFocus()

func (input *Input) SelectAll()

func (input *Input) SetBGColor(newColor matrix.Color)

func (input *Input) SetCursorColor(newColor matrix.Color)

func (input *Input) SetCursorOffset(offset int)

func (input *Input) SetDescription(text string)

func (input *Input) SetFGColor(newColor matrix.Color)

func (input *Input) SetFontSize(fontSize float32)

func (input *Input) SetNextFocusedInput(next *Input)

func (input *Input) SetPlaceholder(text string)

func (input *Input) SetSelectColor(newColor matrix.Color)

func (input *Input) SetText(text string)

func (input *Input) SetTextWithoutEvent(text string)

func (input *Input) SetTitle(text string)

func (input *Input) SetType(inputType InputType)

func (input *Input) Text() string

type InputType = int32

type Label UI

func (l *Label) Base() *UI

func (label *Label) BoldRange(start, end int)

func (label *Label) CalculateMaxWidth() float32

func (label *Label) Clone(to *Label)

func (label *Label) ColorRange(start, end int, newColor, bgColor matrix.Color)

func (label *Label) EnforceBGColor(color matrix.Color)

func (label *Label) EnforceFGColor(color matrix.Color)

func (label *Label) FontFace() rendering.FontFace

func (label *Label) FontSize() float32

func (label *Label) Hide()

func (label *Label) Init(text string)

func (l *Label) LabelData() *labelData

func (label *Label) LineHeight() float32

func (label *Label) MaxWidth() float32

func (label *Label) Measure() matrix.Vec2

func (label *Label) SetBGColor(newColor matrix.Color)

func (label *Label) SetBaseline(baseline rendering.FontBaseline)

func (label *Label) SetColor(newColor matrix.Color)

func (label *Label) SetFontSize(size float32)

func (label *Label) SetFontStyle(style string)

func (label *Label) SetFontWeight(weight string)

func (label *Label) SetJustify(justify rendering.FontJustify)

func (label *Label) SetLineHeight(height float32)

func (label *Label) SetMaxWidth(maxWidth float32)

func (label *Label) SetText(text string)

func (label *Label) SetWidthAutoHeight(width float32)

func (label *Label) SetWrap(wrapText bool)

func (label *Label) Show()

func (label *Label) Text() string

func (label *Label) UnEnforceBGColor()

func (label *Label) UnEnforceFGColor()

type Layout struct {
	Stylizer LayoutStylizer
	// Has unexported fields.
}

func (l *Layout) Border() matrix.Vec4

func (l *Layout) CalcOffset() matrix.Vec2

func (l *Layout) CledarStyles()

func (l *Layout) ContentSize() matrix.Vec2

func (l *Layout) InnerOffset() matrix.Vec4

func (l *Layout) LocalInnerOffset() matrix.Vec4

func (l *Layout) Margin() matrix.Vec4

func (l *Layout) Offset() matrix.Vec2

func (l *Layout) Padding() matrix.Vec4

func (l *Layout) PixelSize() matrix.Vec2

func (l *Layout) Positioning() Positioning

func (l *Layout) Scale(width, height float32) bool

func (l *Layout) ScaleHeight(height float32) bool

func (l *Layout) ScaleWidth(width float32) bool

func (l *Layout) SetBorder(left, top, right, bottom float32)

func (l *Layout) SetInnerOffset(left, top, right, bottom float32)

func (l *Layout) SetInnerOffsetBottom(offset float32)

func (l *Layout) SetInnerOffsetLeft(offset float32)

func (l *Layout) SetInnerOffsetRight(offset float32)

func (l *Layout) SetInnerOffsetTop(offset float32)

func (l *Layout) SetLocalInnerOffset(left, top, right, bottom float32)

func (l *Layout) SetMargin(left, top, right, bottom float32)

func (l *Layout) SetOffset(x, y float32)

func (l *Layout) SetOffsetX(x float32)

func (l *Layout) SetOffsetY(y float32)

func (l *Layout) SetPadding(left, top, right, bottom float32)

func (l *Layout) SetPositioning(pos Positioning)

func (l *Layout) SetRowLayoutOffset(offset matrix.Vec2)

func (l *Layout) SetZ(z float32)

func (l *Layout) Ui() *UI

func (l *Layout) Z() float32

type LayoutStylizer interface {
	ProcessStyle(layout *Layout) []error
}

type LeftStylizer struct{ BasicStylizer }

func (s LeftStylizer) ProcessStyle(layout *Layout) []error

type Manager struct {
	Host  *engine.Host
	Group Group

	// Has unexported fields.
}

func (man *Manager) Add() *UI

func (man *Manager) Clear()

func (man *Manager) DisableUpdate()

func (man *Manager) EnableUpdate()

func (man *Manager) Hovered() []*UI

func (man *Manager) Init(host *engine.Host)

func (man *Manager) IsUpdateDisabled() bool

func (man *Manager) Remove(ui *UI)

func (man *Manager) Reserve(additionalElements int)

type Overflow = int

type Panel UI

func FirstPanelOnEntity(entity *engine.Entity) *Panel

func (p *Panel) AddChild(target *UI)

func (p *Panel) Background() *rendering.Texture

func (p *Panel) Base() *UI

func (p *Panel) BorderColor() [4]matrix.Color

func (p *Panel) BorderSize() matrix.Vec4

func (p *Panel) BorderStyle() [4]BorderStyle

func (p *Panel) Child(index int) *UI

func (p *Panel) Color() matrix.Color

func (p *Panel) DisableDragScroll()

func (p *Panel) DontFitContent()

func (p *Panel) DontFitContentHeight()

func (p *Panel) DontFitContentWidth()

func (p *Panel) EnableDragScroll()

func (p *Panel) EnforceColor(color matrix.Color)

func (p *Panel) FitContent()

func (p *Panel) FitContentHeight()

func (p *Panel) FitContentWidth()

func (p *Panel) FittingContent() bool

func (p *Panel) FittingContentHeight() bool

func (p *Panel) FittingContentWidth() bool

func (p *Panel) Freeze()

func (p *Panel) HasBackground() bool

func (p *Panel) HasEnforcedColor() bool

func (panel *Panel) Init(texture *rendering.Texture, elmType ElementType)

func (p *Panel) InsertChild(target *UI, idx int)

func (p *Panel) IsFrozen() bool

func (p *Panel) IsScrolling() bool

func (p *Panel) MaxScroll() matrix.Vec2

func (p *Panel) Overflow() Overflow

func (p *Panel) PanelData() *panelData

func (p *Panel) RemoveBackground()

func (p *Panel) RemoveChild(target *UI)

func (p *Panel) ResetScroll()

func (p *Panel) ScrollDirection() PanelScrollDirection

func (p *Panel) ScrollToChild(child *UI)

func (p *Panel) ScrollX() float32

func (p *Panel) ScrollY() float32

func (p *Panel) SetBackground(tex *rendering.Texture)

func (p *Panel) SetBorderColor(left, top, right, bottom matrix.Color)

func (p *Panel) SetBorderRadius(topLeft, topRight, bottomRight, bottomLeft float32)

func (p *Panel) SetBorderSize(left, top, right, bottom float32)

func (p *Panel) SetBorderStyle(left, top, right, bottom BorderStyle)

func (p *Panel) SetColor(bgColor matrix.Color)

func (p *Panel) SetOverflow(overflow Overflow)

func (p *Panel) SetScrollDirection(direction PanelScrollDirection)

func (p *Panel) SetScrollX(value float32)

func (p *Panel) SetScrollY(value float32)

func (p *Panel) SetSpeed(speed float32)

func (p *Panel) SetUseBlending(useBlending bool)

func (p *Panel) UnEnforceColor()

func (p *Panel) UnFreeze()

type PanelScrollDirection = int32

type Positioning = int

type ProgressBar Panel

func (p *ProgressBar) Base() *UI

func (p *ProgressBar) Init(fgTexture, bgTexture *rendering.Texture)

func (b *ProgressBar) SetBGColor(bgColor matrix.Color)

func (b *ProgressBar) SetFGColor(fgColor matrix.Color)

func (b *ProgressBar) SetValue(value float32)

func (b ProgressBar) Value() float32

type RightStylizer struct{ BasicStylizer }

func (s RightStylizer) ProcessStyle(layout *Layout) []error

type Select Panel

func (s *Select) AddOption(name string)

func (s *Select) Base() *UI

func (s *Select) Init(text string, options []string)

func (s *Select) PickOption(index int)

func (s *Select) PickOptionByLabel(label string)

func (s *Select) SelectData() *selectData

func (s *Select) SetColor(newColor matrix.Color)

func (s *Select) SetOptionsColor(newColor matrix.Color)

func (s *Select) Value() string

type ShaderData struct {
	rendering.ShaderDataBase
	UVs          matrix.Vec4
	FgColor      matrix.Color
	BgColor      matrix.Color
	Scissor      matrix.Vec4
	Size2D       matrix.Vec4
	BorderRadius matrix.Vec4
	BorderSize   matrix.Vec4
	BorderColor  [4]matrix.Color
	BorderLen    matrix.Vec2
}

func (s ShaderData) Size() int

type Slider Panel

func (s *Slider) Base() *UI

func (slider Slider) Delta() float32

func (s *Slider) Init()

func (slider *Slider) SetBGColor(bgColor matrix.Color)

func (slider *Slider) SetFGColor(fgColor matrix.Color)

func (slider *Slider) SetValue(value float32)

func (s *Slider) SliderData() *sliderData

func (slider Slider) Value() float32

type StretchCenterStylizer struct{ BasicStylizer }

func (s StretchCenterStylizer) ProcessStyle(layout *Layout) []error

type StretchHeightStylizer struct{ BasicStylizer }

func (s StretchHeightStylizer) ProcessStyle(layout *Layout) []error

type StretchWidthStylizer struct{ BasicStylizer }

func (s StretchWidthStylizer) ProcessStyle(layout *Layout) []error

type UI struct {
	// Has unexported fields.
}

func AllOnEntity(entity *engine.Entity) []*UI

func FirstOnEntity(entity *engine.Entity) *UI

func (ui *UI) AddEvent(evtType EventType, evt func()) events.Id

func (ui *UI) Clean()

func (ui *UI) Clone(parent *engine.Entity) *UI

func (ui *UI) Entity() *engine.Entity

func (ui *UI) Event(evtType EventType) *events.Event

func (ui *UI) ExecuteEvent(evtType EventType) bool

func (ui *UI) FindByName(name string) *UI

func (ui *UI) GenerateScissor()

func (ui *UI) Hide()

func (ui *UI) Host() *engine.Host

func (ui *UI) IsDown() bool

func (ui *UI) IsInFrontOf(other *UI) bool

func (ui *UI) IsType(elmType ElementType) bool

func (ui *UI) Layout() *Layout

func (ui *UI) RemoveEvent(evtType EventType, evtId events.Id)

func (ui *UI) SetDirty(dirtyType DirtyType)

func (ui *UI) SetDontClean(val bool)

func (ui *UI) ShaderData() *ShaderData

func (ui *UI) Show()

func (u *UI) ToButton() *Button

func (u *UI) ToCheckbox() *Checkbox

func (u *UI) ToImage() *Image

func (u *UI) ToInput() *Input

func (u *UI) ToLabel() *Label

func (u *UI) ToPanel() *Panel

func (u *UI) ToProgressBar() *ProgressBar

func (u *UI) ToSelect() *Select

func (u *UI) ToSlider() *Slider

func (ui *UI) Type() ElementType

func (ui *UI) Update(deltaTime float64)

type UIElementData interface {
	// Has unexported methods.
}

