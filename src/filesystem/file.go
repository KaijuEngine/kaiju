package filesystem

import (
	"io"
	"os"
	"strings"
)

func WriteFile(path string, data []byte) error {
	f, err := os.OpenFile(path, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	if _, err := f.Write(data); err != nil {
		f.Close()
		return err
	}
	return f.Close()
}

func FileExists(path string) bool {
	stat, err := os.Stat(path)
	return err == nil && !stat.IsDir()
}

func ReadFile(path string) ([]byte, error) {
	file, err := os.Open(path)
	if err != nil {
		return []byte{}, err
	}
	defer file.Close()
	buff, err := io.ReadAll(file)
	return buff, err
}

func ReadTextFile(path string) (string, error) {
	file, err := os.Open(path)
	if err != nil {
		return "", err
	}
	defer file.Close()
	var text strings.Builder
	_, err = io.Copy(&text, file)
	return text.String(), err
}

func CopyFile(src, dst string) error {
	if strings.HasSuffix(src, ".go") {
		return CopyGoSourceFile(src, dst)
	} else {
		sf, err := os.Open(src)
		if err != nil {
			return err
		}
		defer sf.Close()
		_, err = os.Stat(dst)
		if err == nil {
			return os.ErrExist
		}
		df, err := os.Create(dst)
		if err != nil {
			return err
		}
		defer df.Close()
		_, err = io.Copy(df, sf)
		return err
	}
}

func CopyGoSourceFile(src, dst string) error {
	sf, err := os.Open(src)
	if err != nil {
		return err
	}
	defer sf.Close()
	_, err = os.Stat(dst)
	if err == nil {
		return os.ErrExist
	}
	df, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer df.Close()
	_, err = df.WriteString(`// Code generated by "Kaiju build system"; DO NOT EDIT.
`)
	if err != nil {
		return err
	}
	_, err = io.Copy(df, sf)
	return err
}
